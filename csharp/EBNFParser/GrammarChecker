using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EBNFParsers
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    class GrammarCheck
    {
        ArrayList LineToCheck = new ArrayList();
        int counter = 0;
        int openParanthesis = 0;
        bool CounterIsRaised;
        bool lineOK = true;
        bool moreLParents = false;
        bool moreRParents =false;

        public void checkFirstPosition(ArrayList inLine)
        {
            LineToCheck = inLine;
            LineToCheck.TrimToSize();
            String posOne = inLine[counter].ToString();
            switch (posOne)
            {
                case "INTEGER":
                    Console.Write("    INTEGER    ");
                    raiseCounter();
                    checkForOperator();
                    break;
                case "IDENTIFIER":
                    Console.Write("  IDENTIFIER   ");
                    raiseCounter();
                    checkForOperator();
                    break;
                case "LPAREN":
                    checkForLParent();
                    raiseCounter();
                    break;
                case "WHITESPACE":
                    Console.Write("   WHITESPACE   ");
                    if (raiseCounter() == true)
                    {
                    checkForIntOrVar();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }


        }

        void validWhiteSpace()
        {
            String toCheck = LineToCheck[counter].ToString();
            Console.WriteLine("LINEOK = " + lineOK);
            if(counter == (LineToCheck.Capacity - 1))
            {
                evaluateLine();
            }
            else
            {
                lineOK = false;
                evaluateLine();
            }

        }


        void checkForIntOrVar()
        {
            String toCheck = LineToCheck[counter].ToString();
            switch (toCheck)
            {
                case "INTEGER" :
                    Console.Write("   INTEGER    ");
                    if (raiseCounter() == true) {
                    checkForRParent();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                case "IDENTIFIER":
                    Console.Write("    IDENTIFIER   ");
                    if (raiseCounter() == true)
                    {
                        checkForRParent();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                case "RPAREN":
                    checkForRParent();
                    break;
                case "WHITESPACE":
                    Console.Write("   WHITESPACE   ");
                    if (raiseCounter() == true)
                    {
                    checkForIntOrVar();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }
        }


        void evaluateLine()
        {
            Console.WriteLine("");
            if(lineOK == true && openParanthesis==0)
            {
                   Console.WriteLine("The Line is valid");
            }
            else
            {
                Console.WriteLine("The Line is not valid ");
            }

        }

        bool raiseCounter()
        {
            if (counter < (LineToCheck.Capacity-1)) 
            {
                counter++;
                CounterIsRaised = true;
            }
            else
            {
                CounterIsRaised = false;

            }
            return CounterIsRaised;
        }

        void checkForOperator()
        {
            String toCheck = LineToCheck[counter].ToString();
            switch (toCheck)
            {
                case "OPERATOR":
                    Console.Write("   OPERATOR   ");
                    if(raiseCounter()== true)
                    {
                    checkForLParent();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                case "WHITESPACE":
                    Console.Write("   WHITESPACE   ");
                    if (raiseCounter()== true)
                    {
                    checkForOperator();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }

        }

        void checkForLParent()
        {
            String toCheck = LineToCheck[counter].ToString();
            if (toCheck == "LPAREN")
            {
                Console.Write("   LPAREN   ");
               // Console.WriteLine("HODENSACK");
                moreLParents = true;
                openParanthesis++;
                raiseCounter();
            }

            if (CounterIsRaised == true && moreLParents==false)
            {
                lineOK = true;
                checkForIntOrVar();
            }
            else
            {
                moreLParents = false;
                lineOK = false;
                checkForLParent();
            }
        }

        void checkForRParent()
        {
            String toCheck = LineToCheck[counter].ToString();
            if (toCheck == "RPAREN")
            {
                Console.Write("   RPAREN   ");

                if (openParanthesis > 0)
                {
                    moreRParents = true;
                    openParanthesis--;

                    raiseCounter();
                }
                else
                {
                    lineOK = false;
                    evaluateLine();
                }
            }
            //Console.WriteLine("COUNTERISRAISED = " + CounterIsRaised);
            //Console.WriteLine("moreRParents = " + moreRParents);
            if (CounterIsRaised == true && moreRParents==false)
            {
                lineOK = true;
                checkForOperator();
            }
            else if(CounterIsRaised==true && moreRParents==true)
            {
                moreRParents = false;
                checkForRParent();
            }
            else
            {
                evaluateLine();
            }
        }

    }



}



