
namespace EbnfParser
{


    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    class GrammarCheck
    {
        ArrayList LineToCheck = new ArrayList();
        int counter = 0;
        int openParanthesis = 0;
        bool CounterIsRaised;
        bool lineOK = true;
        bool parenthesisClosed = true;
        bool moreLParents = false;
        bool moreRParents = false;

        public void checkFirstPosition(ArrayList inLine)
        {
            LineToCheck = inLine;
            LineToCheck.TrimToSize();
            String posOne = inLine[counter].ToString();
            switch (posOne)
            {
                case "INTEGER":
                    Console.Write(" INTEGER ");
                    raiseCounter();
                    checkForOperator();
                    break;
                case "IDENTIFIER":
                    Console.Write(" IDENTIFIER ");
                    raiseCounter();
                    checkForOperator();
                    break;
                case "LPAREN":
                    Console.Write(" LPAREN ");
                    parenthesisClosed = false;
                    checkForLParent();
                    raiseCounter();
                    break;
                case " WHITESPACE ":
                    validWhiteSpace();
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }


        }

        void validWhiteSpace()
        {
            String toCheck = LineToCheck[counter].ToString();
            if (counter == (LineToCheck.Capacity - 1))
            {
                evaluateLine();
            }
            else
            {
                lineOK = false;
                evaluateLine();
            }

        }


        void checkForIntOrVar()
        {
            String toCheck = LineToCheck[counter].ToString();
            switch (toCheck)
            {
                case "INTEGER":
                    Console.Write(" INTEGER ");
                    if (raiseCounter() == true)
                    {
                        checkForRParent();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                case "IDENTIFIER":
                    Console.Write(" IDENTIFIER ");
                    if (raiseCounter() == true)
                    {
                        checkForRParent();
                    }
                    else
                    {
                        evaluateLine();
                    }
                    break;
                case "RPAREN":
                    Console.Write(" RPAREN ");
                    checkForRParent();
                    break;
                case "WHITESPACE":
                    validWhiteSpace();
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }
        }


        void evaluateLine()
        {

            if (lineOK == true && openParanthesis == 0)
            {
                Console.WriteLine();
                Console.WriteLine("---The Line is valid---");
                resetGrammarChecker();
            }
            else
            {
                Console.WriteLine("---The Line is NOT valid---");
                resetGrammarChecker();
            }

        }

        bool raiseCounter()
        {
            if (counter < (LineToCheck.Capacity - 1))
            {
                counter++;
                CounterIsRaised = true;
            }
            else
            {
                CounterIsRaised = false;

            }
            return CounterIsRaised;
        }

        void checkForOperator()
        {
            String toCheck = LineToCheck[counter].ToString();
            switch (toCheck)
            {
                case "OPERATOR":
                    Console.Write(" OPERATOR ");
                    raiseCounter();
                    checkForLParent();
                    break;
                default:
                    lineOK = false;
                    evaluateLine();
                    break;
            }

        }

        void checkForLParent()
        {
            String toCheck = LineToCheck[counter].ToString();
            if (toCheck == "LPAREN")
            {
                moreLParents = true;
                openParanthesis++;
                raiseCounter();
                parenthesisClosed = false;
            }

            if (CounterIsRaised == true && moreLParents == false)
            {
                lineOK = true;
                checkForIntOrVar();
            }
            else
            {
                moreLParents = false;
                lineOK = false;
                checkForLParent();
            }
        }

        void checkForRParent()
        {
            String toCheck = LineToCheck[counter].ToString();
            if (toCheck == "RPAREN")
            {

                if (openParanthesis > 0)
                {
                    moreRParents = true;
                    openParanthesis--;

                    parenthesisClosed = true;
                    raiseCounter();
                }
                else
                {
                    lineOK = false;
                    evaluateLine();
                }
            }
            if (CounterIsRaised == true && moreRParents == false)
            {
                lineOK = true;
                checkForOperator();
            }
            else if (CounterIsRaised == true && moreRParents == true)
            {
                lineOK = false;
                moreRParents = false;
                checkForRParent();
            }
            else
            {
                evaluateLine();
            }
        }
        void resetGrammarChecker()
        {
            counter = 0;
            openParanthesis = 0;
            lineOK = true;
            parenthesisClosed = true;
        }

    }



}
