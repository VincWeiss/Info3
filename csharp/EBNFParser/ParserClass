using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Collections;
using ConsoleApplication2;

namespace ConsoleApplication2
{

    public class TokenParser
    {

        private readonly Dictionary<Tokens, string> tokenDictionary;
        private readonly Dictionary<Tokens, MatchCollection> regularExpressionsDictionary;
        private string inputString;
        private int index;
        public static TokenParser testP = new TokenParser();
        System.IO.StreamReader file =
        new System.IO.StreamReader("c:\\Users\\Marco\\documents\\expressions.txt");

        public enum Tokens
        {
            IDENTIFIER = 1,
            INTEGER = 2,
            LPAREN = 3,
            RPAREN = 4,
            OPERATOR = 5,
            WHITESPACE = 6
        }


        static void Main(string[] args)
        {
            testP.start();
        }

        public TokenParser()
        {
            tokenDictionary = new Dictionary<Tokens, string>();
            regularExpressionsDictionary = new Dictionary<Tokens, MatchCollection>();
            index = 0;
            inputString = string.Empty;

            tokenDictionary.Add(Tokens.IDENTIFIER, "[x-zX-Z_][x-zX-Z0-9_]*");
            tokenDictionary.Add(Tokens.INTEGER, "[0-9]+");
            tokenDictionary.Add(Tokens.LPAREN, "\\(");
            tokenDictionary.Add(Tokens.RPAREN, "\\)");
            tokenDictionary.Add(Tokens.OPERATOR, "[*+-/]");
            tokenDictionary.Add(Tokens.WHITESPACE, "[ \t]+");
        }
        void checkLine(String line)
        {
            testP.InputString = line;
            GrammarCheck gCheck = new GrammarCheck();
            ArrayList tokenInLine = new ArrayList();
            ArrayList txtInLine = new ArrayList();
            tokenInLine = testP.GetToken();
            foreach (Token t in tokenInLine)
            {
                String tName = t.TokenName.ToString();
                String tValue = t.TokenValue.ToString();
                txtInLine.Add(t.TokenName.ToString());
                Console.WriteLine("TokenName: " + tName + "   TokenValue: " + tValue);
            }
            gCheck.checkFirstPosition(txtInLine);
            tokenInLine.Clear();
            tokenInLine.TrimToSize();
            txtInLine.Clear();
            txtInLine.TrimToSize();
        }

        void start()
        {
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();




        }

        String getLineFromTxt()
        {
            string line = "";
            // Read the file and display it line by line.
            line = file.ReadLine();
            return line;
        }


        void resetParser()
        {
            index = 0;
            inputString = String.Empty;
            regularExpressionsDictionary.Clear();
        }

        public string InputString
        {
            set
            {
                inputString = value;
                prepareRegularExpressions();
            }
        }


        private void prepareRegularExpressions()
        {
            regularExpressionsDictionary.Clear();
            foreach (KeyValuePair<Tokens, string> pair in tokenDictionary)
            {
                regularExpressionsDictionary.Add(pair.Key, Regex.Matches(inputString, pair.Value));
            }
        }



        ArrayList tokenList = new ArrayList();
        public ArrayList GetToken()
        {
            if (index < inputString.Length)
            {

                foreach (KeyValuePair<Tokens, MatchCollection> pair in regularExpressionsDictionary)
                {
                    foreach (Match match in pair.Value)
                    {
                        if (match.Index == index)
                        {
                            index += match.Length;
                            Token t = new Token(pair.Key, match.Value);
                            tokenList.Add(t);
                            String tName = t.TokenName.ToString();
                            String tValue = t.TokenValue.ToString();
                            GetToken();
                        }

                        if (match.Index > index)
                        {
                            break;
                        }
                    }
                }
                index++;
            }
            return tokenList;
        }
    }

}
