using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Collections;
using ConsoleApplication2;
using ConsoleApplication3;

namespace ConsoleApplication2
{

    public class TokenParser
    {

        private readonly Dictionary<Tokens, string> tokenDictionary;
        private readonly Dictionary<Tokens, MatchCollection> regularExpressionsDictionary;
        private string inputString;
        private int index;
        public static TokenParser testP = new TokenParser();
        System.IO.StreamReader file =
        new System.IO.StreamReader("d:\\expressions.txt");
        ArrayList Vincistkuhl = new ArrayList();

        public enum Tokens
        {
            UNDEFINED = 0,
            EQUALS = 1,
            IDENTIFIER = 2,
            FLOAT = 3,
            INTEGER = 4,
            APOSTROPHE = 5,
            LPAREN = 6,
            RPAREN = 7,
            OPERATOR = 8,
            WHITESPACE = 9
            //ASTERISK = 8,
            //SLASH = 9,
            //PLUS = 10,
            //MINUS = 11
        }


        static void Main(string[] args)
        {
            testP.start();
        }

        void checkLine(String line)
        {
            testP.InputString = line;
            GrammarCheck gCheck = new GrammarCheck();
            ArrayList tokenInLine = new ArrayList();
            ArrayList txtInLine = new ArrayList();
            tokenInLine = testP.GetToken();
            //Console.WriteLine("txtLine.Capacity" +txtLine.Capacity);
            //foreach ( Token t in txtLine) { 
            foreach( Token t in tokenInLine)
            {
                    String tName = t.TokenName.ToString();
                    String tValue = t.TokenValue.ToString();
                txtInLine.Add(t.TokenName.ToString());
                    Console.WriteLine("TokenName: " + tName + "   TokenValue: " + tValue);
            }
            Console.WriteLine();
            gCheck.checkFirstPosition(txtInLine);
            tokenInLine.Clear();
            tokenInLine.TrimToSize();
            txtInLine.Clear();
            txtInLine.TrimToSize();
        }

        void start()
        {
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();
            testP.checkLine(testP.getLineFromTxt());
            testP.resetParser();




        }

        String getLineFromTxt()
        {
            string line = "";
            // Read the file and display it line by line.
            line = file.ReadLine();
            //if (line != null)
            //{
            //}


            return line;
        }

        void contains(String line, String search)
        {
            bool isInLine = line.Contains(search);
            if (isInLine)
            {
                Console.WriteLine("The String: " + line + " contains: " + search);
                int index = line.IndexOf(search);
                if (index >= 0)
                    Console.WriteLine("'{0} begins at character position {1}",
                                      line, index + 1);
            }
            isInLine = false;
        }


        void resetParser()
        {
            index = 0;
            inputString = String.Empty;
            regularExpressionsDictionary.Clear();
        }

        public string InputString
        {
            set
            {
                inputString = value;
                prepareRegularExpressions();
            }
        }

        public TokenParser()
        {
            tokenDictionary = new Dictionary<Tokens, string>();
            regularExpressionsDictionary = new Dictionary<Tokens, MatchCollection>();
            index = 0;
            inputString = string.Empty;

            tokenDictionary.Add(Tokens.EQUALS, "="); //UNSUSED
            tokenDictionary.Add(Tokens.IDENTIFIER, "[x-zX-Z_][x-zX-Z0-9_]*");
            tokenDictionary.Add(Tokens.FLOAT, "[0-9]?\\.+[0-9]+");//UNUSED
            tokenDictionary.Add(Tokens.INTEGER, "[0-9]+");
            tokenDictionary.Add(Tokens.APOSTROPHE, "'.*");
            tokenDictionary.Add(Tokens.LPAREN, "\\(");
            tokenDictionary.Add(Tokens.RPAREN, "\\)");
            tokenDictionary.Add(Tokens.OPERATOR, "[*+-/]");
            tokenDictionary.Add(Tokens.WHITESPACE, "[ \t]+");
        }

        private void prepareRegularExpressions()
        {
            regularExpressionsDictionary.Clear();
            foreach (KeyValuePair<Tokens, string> pair in tokenDictionary)
            {
                regularExpressionsDictionary.Add(pair.Key, Regex.Matches(inputString, pair.Value));
            }
        }



            ArrayList tokenList = new ArrayList();
        public ArrayList GetToken()
        {
            if (index < inputString.Length)
            {

                foreach (KeyValuePair<Tokens, MatchCollection> pair in regularExpressionsDictionary)
                {
                    foreach (Match match in pair.Value)
                    {
                        if (match.Index == index)
                        {
                            index += match.Length;
                            Token t = new Token(pair.Key, match.Value);
                            tokenList.Add(t);
                            String tName = t.TokenName.ToString();
                            String tValue = t.TokenValue.ToString();
                            GetToken();
                        }

                        if (match.Index > index)
                        {
                            break;
                        }
                    }
                }
                index++;
                //return new Token(Tokens.UNDEFINED, string.Empty);
            }
            return tokenList;
        }
    }

}

