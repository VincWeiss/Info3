using System;
using System.Collections;

public class EBNFParser
{
    int paranthesisCounter;
    public EBNFParser()
    {
        paranthesisCounter = 0;
    }
    public void parse(String lineToParse, EBNFParser parserObj)
    {

        String completeLine = "";
        completeLine = lineToParse;
        parserObj.checkFirstPosition(lineToParse, completeLine);
    }

    void checkFirstPosition(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                checkForInt(Line, completeLine);
                break;
            case "x":
            case "y":
            case "z":
                checkForVar(Line, completeLine);
                break;
            case "(":
                checkForLParant(Line, completeLine);
                break;
            default:
                evaluateLine(Line, completeLine);
                break;
        }


    }

    void checkForInt(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                Line = RemoveItemFromLine(Line);
                checkForInt(Line, completeLine);
                break;
            case "+":
            case "-":
            case "*":
            case "/":
                checkForOperator(Line, completeLine);
                break;
            case ")":
                checkForRParant(Line, completeLine);
                break;
            default:
                evaluateLine(Line, completeLine);
                break;
        }
    }

    void checkForOperator(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "+":
            case "-":
            case "*":
            case "/":
                Line = RemoveItemFromLine(Line);
                checkForLParant(Line, completeLine);
                break;
            case ")":
                checkForRParant(Line, completeLine);
                break;
            default:
                evaluateLine(Line, completeLine);
                break;
        }

    }

    void checkForVar(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "x":
            case "y":
            case "z":
                Line = RemoveItemFromLine(Line);
                checkForRParant(Line, completeLine);
                break;
            default:
                evaluateLine(Line, completeLine);
                break;
        }
    }
    void evaluateLine(String Line, String completeLine)
    {

        if (Line.Length == 1 && paranthesisCounter == 0)
        {
            Console.WriteLine("The Line is valid " + completeLine);
        }
        else
        {
            Console.WriteLine("The Line is not valid " + completeLine);
        }

    }

    void checkForLParant(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        if (toCheck == "(")
        {
            paranthesisCounter++;
            Line = RemoveItemFromLine(Line);
        }
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                checkForInt(Line, completeLine);
                break;
            case "x":
            case "y":
            case "z":
                checkForVar(Line, completeLine);
                break;
            case "(":
                checkForLParant(Line, completeLine);
                break;
            default:
                evaluateLine(Line, completeLine);
                break;
        }
    }

    void checkForRParant(String Line, String completeLine)
    {
        String toCheck = getNextPos(Line);
        if (toCheck == ")")
        {
            paranthesisCounter--;
            Line = RemoveItemFromLine(Line);
        }
        checkForOperator(Line, completeLine);
    }

    String getNextPos(String Line)
    {
        String toCheck = "";
        if (Line.Length != 0)
        {
            toCheck = Line[0].ToString();
        }
        else
        {
            toCheck = "Error";
        }
        return toCheck;
    }

    String RemoveItemFromLine(String Line)
    {
        String shorterLine = "";
        shorterLine = Line.Remove(0, 1);
        return shorterLine;
    }
}
