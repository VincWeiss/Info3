using System;
using System.Collections;

public class EBNFParser
{
    public void parse(String lineToParse, EBNFParser p)
    {

        String endline = "";
        endline = lineToParse;
        p.checkFirstPosition(lineToParse, endline);
    }

    void checkFirstPosition(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                checkForInt(Line, endline);
                break;
            case "x":
            case "y":
            case "z":
                checkForVar(Line, endline);
                break;
            case "(":
                checkForLParent(Line, endline);
                break;
            default:
                evaluateLine(Line, endline);
                break;
        }


    }

    void checkForInt(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                Line = RemoveItemFromLine(Line);
                checkForInt(Line, endline);
                break;
            case "+":
            case "-":
            case "*":
            case "/":
                checkForOperator(Line, endline);
                break;
            case ")":
                checkForRParent(Line, endline);
                break;
            case "End":
                checkForEnd(Line, endline);
                break;
            default:
                evaluateLine(Line, endline);
                break;
        }
    }

    void checkForOperator(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "+":
            case "-":
            case "*":
            case "/":
                Line = RemoveItemFromLine(Line);
                checkForLParent(Line, endline);
                break;
            case "End":
                checkForEnd(Line, endline);
                break;
            default:
                evaluateLine(Line, endline);
                break;
        }

    }

    void checkForVar(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        switch (toCheck)
        {
            case "x":
            case "y":
            case "z":
                Line = RemoveItemFromLine(Line);
                checkForRParent(Line, endline);
                break;
            case "End":
                checkForEnd(Line, endline);
                break;
            default:
                evaluateLine(Line, endline);
                break;
        }
    }
    void evaluateLine(String Line, String endline)
    {

        if (Line.Length <= 1 )
        {
            Console.WriteLine("The Line is valid " + endline );
        }
        else
        {
            Console.WriteLine("The Line is not valid " + endline );
        }
      

    }

    void checkForLParent(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        if (toCheck == "(")
        {
            Line = RemoveItemFromLine(Line);
        }
        switch (toCheck)
        {
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                checkForInt(Line, endline);

                break;
            case "x":
            case "y":
            case "z":
                checkForVar(Line, endline);
                break;
            case "(":
                checkForLParent(Line, endline);
                break;
            default:
                evaluateLine(Line,endline);
                break;
        }
    }

    void checkForRParent(String Line, String endline)
    {
        String toCheck = getNextPos(Line);
        if (toCheck == ")")
        {
            Line = RemoveItemFromLine(Line);
        }
        checkForOperator(Line, endline);
    }

    void checkForEnd(String Line, String endline)
    {
        String toCheck = "";
        toCheck = Line[0].ToString();
        evaluateLine(Line, endline);
    }

    String getNextPos(String Line)
    {
        
        String toCheck = "";
        if (Line.Length != 0)
        {
            toCheck = Line[0].ToString();
        }
        else {
            toCheck = "Error";
        }
        return toCheck;
    }

    String RemoveItemFromLine(String Line)
    {
        String shorterLine = "";
        if (Line.Length > 1)
        {
            shorterLine = Line.Remove(0,1);
        }
        
        return shorterLine;
    }
}
