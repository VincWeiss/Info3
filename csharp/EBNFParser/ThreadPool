using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EbnfParser;

namespace EbnfParser
{
    class TPool
    {
        private System.IO.StreamReader file =
        new System.IO.StreamReader("D:\\expressions.txt");
        int QueueLength;
        bool taskNotCompleted;
        public Object thisLock = new Object();

        public TPool()
        {
            taskNotCompleted = true;
            QueueLength = 0;
        }

        public void addTaskToQueue(TPool poolObj)
        {
            String l = ReadTxt();
            Console.WriteLine("Z28" + l);
            ThreadPool.QueueUserWorkItem(
            o => poolObj.parsLine(l));
            QueueLength++;
        }
        private string ReadTxt()
        {
            string line = "";
            if(file.ReadLine() == null)
            {
                QueueLength = 0;
                taskNotCompleted = false;
            }
            else
            {
            line = file.ReadLine();
            }

            return line;
        }
        public void parsLine(String line)
        {
            Console.WriteLine("Parser=" +line);
            EBNFParser parser = new EBNFParser();

                    parser.parse(line);
                    Thread.Sleep(100);
                    QueueLength--;
               
        }

        public static void Main(String[] args)
        {
            TPool tPoolObj = new TPool();
            ThreadPool.SetMaxThreads(3,3);
            while(tPoolObj.taskNotCompleted == true)
            {

                tPoolObj.addTaskToQueue(tPoolObj);
            }
            while (tPoolObj.QueueLength != 0)
            {
                Thread.Sleep(1000);
            }
        }
    }
}
