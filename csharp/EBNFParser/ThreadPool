using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EbnfParser;

namespace EbnfParser
{
    class TPool
    {
        private System.IO.StreamReader file =
        new System.IO.StreamReader("D:\\expressions.txt");
        int QueueLength;
        bool taskNotCompleted;
        public Object thisLock = new Object();

        public TPool()
        {
            taskNotCompleted = true;
            QueueLength = 0;
        }

        public void addTaskToQueue(int id)
        {
            ThreadPool.QueueUserWorkItem(
            new WaitCallback(parsLine), id);
            QueueLength++;
        }
        private string ReadTxt()
        {
            string line = "";
            line = file.ReadLine();

            return line;
        }
        public void parsLine(Object obj)
        {
            lock (thisLock)
            {
                String input = ReadTxt();
                if (input == null || input == "")
                {
                    QueueLength = 0;
                    taskNotCompleted = false;
                }
                else
                {
                EBNFParser parser = new EBNFParser();
                    Console.WriteLine(input);

                    parser.parse(input);
                    Thread.Sleep(100);
                    QueueLength--;
                }
            }
        }
        public static void Main(String[] args)
        {
            TPool tPoolObj = new TPool();
            int id = 1;
            ThreadPool.SetMaxThreads(3,3);
            while(tPoolObj.taskNotCompleted == true)
            {

                tPoolObj.addTaskToQueue(id);
                id++;
            }
            while (tPoolObj.QueueLength != 0)
            {
                Thread.Sleep(1000);
            }
        }
    }
}
