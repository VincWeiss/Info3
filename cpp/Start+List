// LamdaExpressions.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <list>
#include <string>
#include "typeinfo"
#include <iostream>

using namespace std;
int main();
template <class T>
void add(T);


class FiltrableList {

private:
	list <float> floatList;
	list <string> stringList;

public:
	FiltrableList() {

	}

	void add(string e) {
		string type = typeid(e).name();
		cout << "You have a -: " << typeid(e).name() << "\n";
		
		if (type == "float") {
			float temp = stof(e);
			floatList.push_back(temp);
		}
		else if (type == "string") {
			string temp = e;
			stringList.push_back(temp);
		}
		cout << "floatListe Size ---: " << floatList.size() << endl;
		cout << "stringList Size ---: " << stringList.size() << endl;
		
	}

	void remove(string e) {
		string type = typeid(e).name();
		cout << "You have a -: " << typeid(e).name() << " to remove \n";

		if (type == "float") {
			float temp = stof(e);
			floatList.remove(temp);
		}
		else if (type == "string") {
			string temp = e;
			stringList.remove(temp);
		}
		cout << "floatListe Size ---: " << floatList.size() << endl;
		cout << "stringList Size ---: " << stringList.size() << endl;

	}

	bool has(string e) {
		string type = typeid(e).name();
		bool hasElement = false;
		if (type == "float") {
			float element;
			for each(element in floatList) {
				if (element == stof(e)) {
					hasElement = true;
				}
			}
		}
		else if (type == "string") {
			string element;
			for each(element in stringList) {
				if (element == e) {
					hasElement = true;
				}
			}
		}
		return hasElement;
	}

	list<string> filter() {
		//Func<T,boolean> l 
	}
};

int main()
{
	string a = "abcd";
	FiltrableList f = FiltrableList();
	f.add("2.7");
	f.add(a);
    return 0;
}

