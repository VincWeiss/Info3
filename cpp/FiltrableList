#include "stdafx.h"
#include <list>
#include <string>
#include "typeinfo"
#include <iostream>

using namespace std;

template <class T>
void add(T);
template <class T>
void remove(T);
template <class T>
bool has(T);

class FiltrableList {


private:
	list<float> floatList;
	list<string> stringList;

public:
	//default Constructor
	FiltrableList(){

	}

	template <class T>
 	void add(T e) {
		string type = typeid(e).name();
		string temp = e;
		float helper = ::stof(temp.c_str());
		cout << "You have a -: " << typeid(e).name() << "\n";
		if (type == "float") {
			cout << "The typeid : " << typeid(e).name() << "\n";
			floatList.push_back(helper);
		}
		else if (type == "string") {
			cout << "The total string is: " << typeid(e).name() << endl;
			stringList.push_back(e);
		}
		cout << "floatListe Size ---: " << floatList.size() << endl;
		cout << "stringList Size ---: " << stringList.size() << endl;
	}

	template <class T>
	void remove(T e) {
		string type = typeid(e).name();
		string temp = e;
		float helper = ::stof(temp.c_str());
		if (type == "float") {
			floatList.remove(helper);
			cout << "The removable float is: {0}" << typeid(e).name() << endl;
		}
		else if (type == "string") {
			cout << "The removable string is: {0}" << typeid(e).name() << endl;
			stringList.remove(e);
		}
		cout << "floatListe Size after removing: " << floatList.size() << endl;
		cout << "stringlist Size after removing: " << stringList.size() << endl;
	}

	template <class T>
	bool has(T e) {
		string type = typeid(e).name();
		string temp = e;
		float helper = ::stof(temp.c_str());
		bool isInList = false;
		if (type == "float") {
			float element;
			for each(element in floatList) {
				if (element == helper) {
					isInList = true;
					cout << "has element : " << e << endl;
				}//ausgabe für, wenn element nicht drin ist
			}
		}
		else if (type == "string") {
			string element;
			for each(element in stringList) {
				if (element == e) {
					isInList = true;
					cout << "has element : " << e << endl;
				}//ausgabe für, wenn element nicht drin ist
			}
		}
		return isInList;
	}

	list<float> filter() {
		float element;
		list<float> result;
		for each(element in floatList) {
			//Func<T,boolean> l auf das element anwenden. 
			result.push_back(element);
		}
		return result;
	}
};
