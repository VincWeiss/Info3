'''
Created on 25.11.2015

@author: Vinc
'''
import linecache
from test.test_typechecks import Integer
'''
this is the class where the threads have their own methods to assign their tasks
'''
class threadclass():
   
    readLineAmount = 0
    globalLineAmount = 0
    sharedMailadressList = list()
    turn = Integer
    whosTurn = False
    isSharedListReady = False

    def __init__(self, idThread):
        self.idThread = idThread
    '''    
    To make sure the Threads read One by One we use the turn variable.
    At the moment we need the 'readLineAmount' to ensure we only read the Lines in our txt.
    Later it should read as long as the txt has Lines available
    Each thread sets the 'TurnFlag', so the next Thread knows that he s ready. 
    '''        
        
        
    def readFirstFile():  # @NoSelf
        t1 = threadclass(1)
        t1.setReadersTurn(1)
        while t1.isSharedListReady is False:
            if t1.getReadersTurn() is 1:
                t1.readLineAmount += 1
                t1.readThisFile("mails1")
                t1.setReadersTurn(2)
        threadclass.globalLineAmount += t1.readLineAmount
                
    
    '''
    The method does the same as 'readFirstFile'. 
    DONE :: Later it should be possible to have the code in a third method and just run it by the threads method
    '''
    def readSecondFile():  # @NoSelf
        t2 = threadclass(2)
        while t2.isSharedListReady is False:
            if t2.getReadersTurn() is 2:
                t2.readLineAmount += 1
                t2.readThisFile("mails2")
                t2.setReadersTurn(1)
        threadclass.globalLineAmount += t2.readLineAmount
        
    
    '''
    opens the file with the name given and copies the line No:'readLineAmount'
    '''
    def readThisFile(self, fileName):
        lineString = str(linecache.getline(fileName+ ".txt", self.readLineAmount))
        if lineString is "":
            self.isSharedListReady = True
            threadclass.globalLineAmount -= 1 
        else:
            self.sharedMailadressList.append(lineString)
        
    
    '''
    Method copies all lines that end with '.edu' in another list and counts it's size
    '''
    def CountForString():  # @NoSelf
        t3 = threadclass(3)
        amountOfEdu = 0
        eduAdresses = list()
        suffix = ".edu\n"
        
        while threadclass.globalLineAmount > 0:
            line = t3.sharedMailadressList.pop()
            threadclass.globalLineAmount -= 1
            if line.endswith(suffix) is True:
                eduAdresses.append(line)
                amountOfEdu += 1
                
        print("Document has " + str(amountOfEdu) + " .edu Adresses!")

    '''
    getter: checks for typesecurity and null
            returns the 'turn' variable
    '''
    def getReadersTurn(self):
        assert type(threadclass.turn) is not None and type(threadclass.turn) is int
        return threadclass.turn
    
    
    def setReadersTurn(self, newTurnValue):
        assert type(newTurnValue) is not None and type(newTurnValue) is int
        threadclass.turn = newTurnValue
        
#end class
