'''
Created on 24.11.2015

@author: Oxana
'''
from fileinput import DEFAULT_BUFSIZE

class Buffer: #The class Buffer
    
    pushIndex = 0
    popIndex  = 0
    isSpaceToWrite = True
    isProductToConsume = False
    isBufferFull = False
    isBufferEmpty = True
    
    #creates a buffer of a preferred size with all values set to none
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = [None]* capacity
        #pcpBuffer = self.buffer
    
    def push(self,inValue):
        if self.getPushIndex() < len(self.buffer) : 
            self.buffer[self.getPushIndex()] = inValue
            print(self.buffer)
            self.raisePushIndex()
            
    
    def popNext(self):
        output = self.buffer[self.getPopIndex()]
        self.buffer[self.getPopIndex()] = None
        print("set to none at index : " + str(self.getPopIndex()))
        self.raisePopIndex()
        return output
    
    def getPushIndex(self):
        if Buffer.pushIndex < len(self.buffer):
            return Buffer.pushIndex
        else:
            Buffer.pushIndex =0
            return Buffer.pushIndex
        
        
    def getPopIndex(self):
        if Buffer.popIndex < len(self.buffer):
            return Buffer.popIndex
        else:
            Buffer.popIndex = 0
            return Buffer.popIndex
            
    def raisePushIndex(self):
        Buffer.pushIndex +=1
        if self.getPushIndex() is len(self.buffer) :
            print(len(self.buffer))
            Buffer.pushIndex=0
        if self.getPushIndex() is self.getPopIndex():
            self.isSpaceToWrite = False
            print("PUSH = POP")
            
    def raisePopIndex(self):    
        Buffer.popIndex +=1
        if self.getPopIndex() is len(self.buffer) :
            Buffer.popIndex=0
        if self.getPopIndex() is self.getPushIndex():
            self.isProductToConsume = False
            print("PUSH == POP")
            
    def isFull(self):
        if self.getPushIndex() <= len(self.buffer):
            print("PENISSSSS")
            if self.buffer[self.getPopIndex()] is not None:
                self.isBufferFull = True
                print("is full --------------------------------------!")
            else:
                self.isBufferFull = False
        
    def isEmpty(self):
        while self.getPushIndex() <= len(self.buffer):
            self.isBufferEmpty = True
        else: 
            self.isBufferEmpty = False
    
#end of class
pcpBuffer = Buffer(DEFAULT_BUFSIZE)
