'''
Created on 24.11.2015

@author: Oxana, Vinc, Marco
'''
from fileinput import DEFAULT_BUFSIZE
from time import sleep

class Buffer: 
    
    '''
    @param capacity
        size of the buffer
    constructor
    creates a buffer of a preferred size with all values set to none
    '''
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = [None]* capacity
        
    '''
    Ensures that the buffer is running all the time
    '''
    def start(self):
        while True:
            self.nextTurn()
            sleep(0.25)
    
    '''
    This is the reason why the buffer pushes all values to the end and
    prints the buffer
    '''
    
    def nextTurn(self):
        print(self.buffer)
        itVar = self.capacity -1
        self.isEmpty()
        self.isFull()
        if self.buffer[itVar] is None:
            while itVar > 0:
                tempVar = self.buffer[itVar-1]
                self.buffer[itVar -1] = None
                self.buffer[itVar] = tempVar
                itVar -= 1
        sleep(0.1)
                
    '''
    @param inValue
        the object to put in the buffer
    '''  
    def push(self,inValue):
        if self.checkForRightType(inValue) is True:
            
            if self.buffer[0] is None : 
                self.buffer[0] = inValue
                
    '''
    @param inValue
            the object to check for it's type
        Checks if the object has the type we want and returns true if so
    @return: Boolean      
    '''  
    def checkForRightType(self,inValue):
        if type(inValue) is int:
            return True
        else:
            print("Object: "+inValue+" is not from the wanted object type (int). " + inValue + " was not added!")
            return False
    
    '''
    get a object from the buffer
    @return output
    '''
    def pop(self):
        if self.buffer[self.capacity -1] is not None:
            output = self.buffer[self.capacity -1]
            print(self.buffer)
            self.buffer[self.capacity -1] = None
            return output
    
    '''
    asks if the buffer is full
    @return boolean
        if the buffer is full it returns true
    '''
    def isFull(self):
        countVar = 0
        while countVar < self.capacity:
            if self.buffer[countVar] is None:
                return False
            countVar += 1
        return True        
    
    '''
    asks if the buffer is empty
    @return boolean
        is the buffer is empty it returns true
    '''    
    def isEmpty(self):
        countVar = 0
        while countVar < self.capacity:
            if self.buffer[countVar] is not None:
                return False
            countVar += 1
        return True        
    
#end of class

pcpBuffer = Buffer(DEFAULT_BUFSIZE)

#end of module 
